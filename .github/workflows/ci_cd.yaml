name: CI/CD Elixir
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
jobs:
  ci:
    runs-on: ubuntu-latest
    name: Compile with mix test, format, dialyzer & unused deps check
    env:
      MIX_ENV: test
    services:
      postgres:
        image: postgres:17.4
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Elixir
        uses: erlef/setup-beam@v1.18.2
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Cache deps directory
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-
      - name: Get Dependencies
        run: mix deps.get
      - run: mix compile --warnings-as-errors
      - name: Run tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mix coveralls.github --max-failures 1 --trace --warnings-as-errors
      - name: Check code is formatted
        run: mix format --check-formatted
      - name: Cache plt files
        uses: actions/cache@v4
        env:
          EX_OTP_VERSIONS: ${{ steps.setup-beam.outputs.elixir-version }}
          KEY_BASE: plt-${{ runner.os }}-${{ env.EX_OTP_VERSIONS }}
        with:
          path: |
            priv/plts
          key: |
            ${{ env.KEY_BASE }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.KEY_BASE }}-
      - name: Dialyzer static analysis
        run: mix dialyzer --format github
      - name: Check unused dependencies
        run: mix deps.unlock --check-unused
  lint:
    runs-on: ubuntu-latest
    name: Lint Dockerfile
    steps:
      - uses: actions/checkout@v4
      - name: Install dockerlint
        run: npm install -g dockerlint
      - name: Lint Dockerfile
        run: dockerlint Dockerfile
  build-push:
    runs-on: ubuntu-latest
    needs: [ci, lint]
    outputs:
      unique_docker_tag: ${{steps.get-unique-docker-tag.outputs.sha_tag }}
    name: Build Docker image & push to ghcr.io
    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/theendisnear/kanban
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr
            type=sha,format=short
      - name: Parse versions from .tool-versions
        id: parse-asdf
        run: ./scripts/versions.sh
      - uses: docker/setup-buildx-action@v3
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=registry,ref=ghcr.io/theendisnear/kanban:cache
          cache-to: type=registry,ref=ghcr.io/theendisnear/kanban:cache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          build-args: |
            ELIXIR_VERSION=${{ env.ELIXIR_VERSION}}
            OTP_VERSION=${{ env.ERLANG_VERSION }}
      - name: Gets unique image tag
        id: get-unique-docker-tag
        if: github.ref == 'refs/heads/main'
        run: |-
          IMAGE_TAGE=$(echo "${{ steps.meta.outputs.tags }}" \
                        | grep 'sha' \
                        | tr '\n' ' ' \
                        | awk '{print $1}'
          echo "sha_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-push
    name: Deploy application
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/deploy
        with:
          github_user: ${{ github.repository_owner }}
          gh_pat: ${{ secrets.GH_PAT }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          age_key: ${{ secrets.AGE_KEY }}
          ssh_private_key: ${{ secrets.PRIVATE_KLEY }}
          image_tag: ${{ needs.build-push.outputs.unique_docker_tag }}
